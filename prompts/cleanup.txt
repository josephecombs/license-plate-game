-this project has problems. this series of prompts will deal with these issues

1.) Local Development
-this app is developed as a github create-react-app page from its root, and as a cloudflare worker / durable objects thing from within cloudflare-oauth-worker. I need you to very clearly explain this in the README.md. Delete all boilerplate and explain this. 
-most of this shit is already set up but I want a CONSISTENT, BULLETPROOF PROCESS THAT DOESNT BREAK BETWEEN MACHINE RESTARTS / CURSOR RESTARTS

Explain how I can restart my terminal, open 2 tabs and get the project running on localhost:3000 with like npm start and npx wrangler whatever. I will implement the steps you propose in the readme and report any issues. It's critical to go step by step and only tell me to do one thing at a time, so I can report outcomes as we go. don't spam a zillion steps at each response please. thanks

2.) index.js cleanup
Currently, this file serves every single controller action in the site. I need you to make a more restful structure (maybe some new files, and a /shared lib to host shared functions such as Auth)
  a.) so analyze the file and propose a better file / folder structure for this area of the app

  b.) This was your answer to 2a):

  I'll analyze the index.js file in the Cloudflare worker to understand the current structure and propose a better organization. Let me examine the file first.
Now I can see the current structure. This index.js file is indeed doing way too much - it's handling OAuth, user management, game logic, email notifications, admin functions, and more all in one massive file. Let me propose a much better, RESTful structure:

  Proposed File/Folder Structure
mapping

cloudflare-oauth-worker/src/
├── index.js                    # Main router/dispatcher only
├── lib/                        # Shared utilities
│   ├── auth.js                # Authentication & session management
│   ├── cors.js                # CORS handling
│   ├── email.js               # Email notification functions
│   └── utils.js               # General utilities (anonymize, state detection)
├── routes/                     # Route handlers
│   ├── auth.js                # OAuth & session routes (/sessions/new, /validate-session)
│   ├── game.js                # Game routes (/game)
│   ├── users.js               # User management routes (/users/ban, /users/unban)
│   ├── reports.js             # Reports route (/reports)
│   └── debug.js               # Debug routes (/debug-env, /debug-game)
├── durable-objects/            # Durable Object classes
│   ├── User.js                # User Durable Object
│   ├── Game.js                # Game Durable Object
│   └── UserSession.js         # UserSession Durable Object
└── constants/                  # Constants and configuration
    └── states.js              # State names mapping

Key Benefits of This Structure
Separation of Concerns: Each file has a single responsibility
RESTful Routes: Clear, logical endpoint organization
Reusable Auth: Centralized authentication logic
Maintainable: Easy to find and modify specific functionality
Testable: Individual modules can be tested separately
Scalable: Easy to add new routes and features
What Each File Would Handle
index.js: Just route dispatching and basic request handling
lib/auth.js: Session validation, admin checks, user lookup
lib/email.js: AWS SES email functionality
routes/auth.js: OAuth flow and session management
routes/game.js: Game state CRUD operations
routes/users.js: User banning/unbanning
routes/reports.js: Admin reports and data retrieval
durable-objects/: Clean, focused Durable Object classes
This structure follows REST principles much better and makes the codebase maintainable. The current index.js is doing the work of what should be 8+ separate, focused files.
Would you like me to proceed with implementing this restructuring, or would you prefer to review this proposal first?
  
  implement the suggestions above please.

  c.) great job. Now, please implement tests of these new files, controllers, constants, etc. I prefer that the tests be kept in a directory /test at the root of the project. Tell me how to run the test suite from the root of the project after this is done. Generally, my testing philosophy is:

  happy path, edge cases. thanks